# environment variables
environment:
  node_pre_gyp_accessKeyId:
    secure: RGPgGBwBvgdp3LLG8315QOf5frgOw+cjGCjelCYeWzE=
  node_pre_gyp_secretAccessKey:
    secure: NiMnMc+zpA6ZxoQ1fwaezzqva6HRGuQIDsjmMhw0FJiAxqPTAJxXCV/Z3p900Xe9
  matrix:
    - nodejs_version: "0.10"
    - nodejs_version: "0.12"
    - nodejs_version: "3"
    - nodejs_version: "4"

platform:
  - x64
  - x86

install:
  - ps: Install-Product node $env:nodejs_version $env:platform
  - npm update -g
  - set PATH=%APPDATA%\npm;%PATH%
  - node --version
  - npm --version
  - npm install -g node-gyp node-pre-gyp

before_build:
  - set COMMIT_MSG="%APPVEYOR_REPO_COMMIT_MESSAGE%"
  - set PUBLISH_BINARY=false
  - git describe --tags --always HEAD > _git_tag.tmp
  - set /p GIT_TAG=<_git_tag.tmp
  - echo %GIT_TAG%
  - echo %APPVEYOR_REPO_BRANCH%
  - del _git_tag.tmp
  # If we are building a tag commit we set PUBLISH_BINARY to true
  - if x%APPVEYOR_REPO_BRANCH%==x%GIT_TAG% set PUBLISH_BINARY=true
  # Or look for commit message containing `[publish binary]`
  - if not x%COMMIT_MSG:[publish binary]=%==x%COMMIT_MSG% set PUBLISH_BINARY=true
  # Or look for commit message containing `[publish binary windows]`
  - if not x%COMMIT_MSG:[publish binary windows]=%==x%COMMIT_MSG% set PUBLISH_BINARY=true
  - echo %PUBLISH_BINARY%
  - set APP_PATH=%cd%
  - cd %APP_PATH%

build_script:
  # Make sure to use to pass --msvs_version=2013 to the npm install command
  # otherwise some bindings and libraries might now be available, an error will trigger
  - npm install --build-from-source --msvs_version=2013

test_script:
  - npm test

deploy_script:
  - if %PUBLISH_BINARY%==true node-pre-gyp package publish 2>&1

# test installing from binary package works
on_success:
  - if %PUBLISH_BINARY%==true npm install --fallback-to-build=false
  - if %PUBLISH_BINARY%==true node-pre-gyp info
